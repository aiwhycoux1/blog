<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Progur!</title>
    <description>Daily programming tutorials, tips, and news.</description>
    <link>http://progur.com/</link>
    <atom:link href="http://progur.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 27 Sep 2016 07:27:02 +0530</pubDate>
    <lastBuildDate>Tue, 27 Sep 2016 07:27:02 +0530</lastBuildDate>
    <generator>Jekyll v3.2.0</generator>
    
      <item>
        <title>How to Create a Programming Language Using ANTLR4</title>
        <description>&lt;p&gt;There are thousands of programming languages available today, and new ones show up every year. If you are a programmer, at some point in your life, you must have wondered if you too could ever create your very own language, one that conforms to your ideals. Well, thanks to ANTLR v4, doing so has become easier than ever. In this tutorial, I’ll show you how to create a very simple programming language using ANTLR4 and Java.&lt;/p&gt;

&lt;h3 id=&quot;project-setup&quot;&gt;Project Setup&lt;/h3&gt;

&lt;p&gt;I’m going to assume that you already have Java 7 installed on your computer, along with Eclipse.&lt;/p&gt;

&lt;p&gt;Use the following command to download ANTLR v4.5.3 as a JAR file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;wget http://www.antlr.org/download/antlr-4.5.3-complete.jar&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After you place it in the &lt;strong&gt;lib&lt;/strong&gt; folder of your project, in the Package Explorer view, right click on it and select &lt;strong&gt;Build Path &amp;gt; Add to Build Path&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;create-a-grammar-file&quot;&gt;Create a Grammar File&lt;/h3&gt;

&lt;p&gt;To keep this tutorial short, we’ll be creating a very simple programming language. Let’s call it &lt;strong&gt;GYOO&lt;/strong&gt;. Here’s a sample program in GYOO:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The program above demonstrates all the features that we are going to support in this language. It’s going to have three types of statements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;an assign statement&lt;/li&gt;
  &lt;li&gt;an add statement&lt;/li&gt;
  &lt;li&gt;a print statement&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It can handle only positive numbers, and programs must begin and end with the &lt;code class=&quot;highlighter-rouge&quot;&gt;begin&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;end&lt;/code&gt; keywords.&lt;/p&gt;

&lt;p&gt;Accordingly, create a new file call &lt;strong&gt;GYOO.g4&lt;/strong&gt; inside the &lt;strong&gt;src&lt;/strong&gt; folder and add the following grammar to it:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;grammar&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GYOO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'begin'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;statement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'end'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		  
&lt;span class=&quot;n&quot;&gt;statement&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assign&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;assign&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'let'&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ID&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'be'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;NUMBER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'print'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;NUMBER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'add'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;NUMBER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'to'&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ID&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;ID&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;NUMBER&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;WS&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;skip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The grammar should be fairly intuitive to you if you are familiar with BNF.&lt;/p&gt;

&lt;h3 id=&quot;generate-parser-and-lexer&quot;&gt;Generate Parser and Lexer&lt;/h3&gt;

&lt;p&gt;Now that we have a grammar file, we can pass it as an input to the &lt;code class=&quot;highlighter-rouge&quot;&gt;org.antlr.v4.Tool&lt;/code&gt; class and generate a parser and lexer for it. You could use the ANTLR Eclipse plugin to do so. In this tutorial, however, I’ll do it manually on the command line:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;java -cp &lt;span class=&quot;s2&quot;&gt;&quot;.:../../../../lib/antlr-4.5.3-complete.jar:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CLASSPATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 org.antlr.v4.Tool -package com.progur.langtutorial GYOO.g4&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Make sure that you specify your own classpath and package name while running the command. Once the command completes successfully, you’ll have several new Java classes in your &lt;strong&gt;src&lt;/strong&gt; folder.&lt;/p&gt;

&lt;h3 id=&quot;create-a-custom-listener&quot;&gt;Create a Custom Listener&lt;/h3&gt;

&lt;p&gt;You must now create a new Java class that is a subclass of the &lt;code class=&quot;highlighter-rouge&quot;&gt;GYOOBaseListener&lt;/code&gt; class. Call it &lt;strong&gt;MyListener&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Inside &lt;code class=&quot;highlighter-rouge&quot;&gt;MyListener&lt;/code&gt;, you need to tell ANTLR’s parser what it should do every time it encounters a specific type of token. For example, every time it encounters an assign statement, it must assign a value to a variable. You can do so by overriding the &lt;code class=&quot;highlighter-rouge&quot;&gt;enterAssign()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;exitAssign()&lt;/code&gt; methods. There are similar methods for the print and add statements too.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MyListener&lt;/code&gt; also needs a &lt;code class=&quot;highlighter-rouge&quot;&gt;Map&lt;/code&gt; object that can store the names and values of all the variables.&lt;/p&gt;

&lt;p&gt;Accordingly, add the following code to the class:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyListener&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GYOOBaseListener&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MyListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;variables&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;exitAssign&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AssignContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// This method is called when the parser has finished&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// parsing the assign statement&lt;/span&gt;
		
		&lt;span class=&quot;c1&quot;&gt;// Get variable name&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;variableName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		
		&lt;span class=&quot;c1&quot;&gt;// Get value from variable or number&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; 
				&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;NUMBER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		
		&lt;span class=&quot;c1&quot;&gt;// Add variable to map&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variableName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;exitAdd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// This method is called when the parser has finished&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// parsing the add statement&lt;/span&gt;
		
		&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;variableName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; 
				&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; 
				&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;NUMBER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
		
		&lt;span class=&quot;n&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variableName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variableName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;exitPrint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PrintContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// This method is called when the parser has finished&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// parsing the print statement&lt;/span&gt;
		
		&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;NUMBER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; 
				&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;run-the-parser&quot;&gt;Run the Parser&lt;/h3&gt;

&lt;p&gt;At this point, our programming language is almost ready. However, we still need to pass an input file to it and break it down into tokens. In order to that, add a new class called &lt;strong&gt;Main&lt;/strong&gt; to your project and add a &lt;code class=&quot;highlighter-rouge&quot;&gt;main()&lt;/code&gt; method to it.&lt;/p&gt;

&lt;p&gt;Inside the method, you must first create an &lt;code class=&quot;highlighter-rouge&quot;&gt;ANTLRInputStream&lt;/code&gt; object and pass a &lt;code class=&quot;highlighter-rouge&quot;&gt;FileInputStream&lt;/code&gt; to it. Next, you must create a &lt;code class=&quot;highlighter-rouge&quot;&gt;GYOOLexer&lt;/code&gt; object based on the &lt;code class=&quot;highlighter-rouge&quot;&gt;InputStream&lt;/code&gt;. You can now create a stream of tokens using the lexer, and pass it as an input to a &lt;code class=&quot;highlighter-rouge&quot;&gt;GYOOParser&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;You must, of course, not forget to add the &lt;code class=&quot;highlighter-rouge&quot;&gt;MyListener&lt;/code&gt; class as a listener to the &lt;code class=&quot;highlighter-rouge&quot;&gt;GYOOParser&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;At this point, you can call the &lt;code class=&quot;highlighter-rouge&quot;&gt;program()&lt;/code&gt; method to start the parsing.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;ANTLRInputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ANTLRInputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FileInputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]));&lt;/span&gt;	
		
			&lt;span class=&quot;n&quot;&gt;GYOOLexer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lexer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GYOOLexer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;GYOOParser&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GYOOParser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CommonTokenStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lexer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addParseListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// Start parsing&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And now, if you pass the sample GYOO program you saw earlier as the input file, you should see the following output:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;You now know how to create a simple programming language using ANTLR v4. In a future tutorial, I’ll show you how to create a more complex language that can have conditions and loops. If you have any questions, please do write a comment.&lt;/p&gt;
</description>
        <pubDate>Tue, 27 Sep 2016 00:00:00 +0530</pubDate>
        <link>http://progur.com/2016/09/how-to-create-language-using-antlr4.html</link>
        <guid isPermaLink="true">http://progur.com/2016/09/how-to-create-language-using-antlr4.html</guid>
        
        
        <category>Programming</category>
        
      </item>
    
      <item>
        <title>How to Hide the Status Bar and the Navigation Bar in Android</title>
        <description>&lt;p&gt;Sometimes, you might want to use every single pixel that’s available on your user’s screen. Removing paddings and margins won’t get you very far because the Android OS, by default, displays a navigation bar at the bottom, and a status bar at the top. Both of them consume a lot of pixels and stop you from providing a truly immersive, full-screen experience. Fortunately, hiding those bars isn’t very difficult.&lt;/p&gt;

&lt;p&gt;In this tutorial, I’ll show you how to hide both the status bar and the navigation bar of your Android &lt;code class=&quot;highlighter-rouge&quot;&gt;Activity&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;create-a-layout&quot;&gt;1. Create a Layout&lt;/h3&gt;

&lt;p&gt;You’ll need a layout file for your Activity. So, create one now. Make sure that there are no margins or paddings in the root element of the layout. Here’s what I have:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;LinearLayout&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;xmlns:android=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:orientation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;vertical&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@+id/mylayout&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:background=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#FF0000&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/LinearLayout&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;use-the-layout&quot;&gt;2. Use the Layout&lt;/h3&gt;

&lt;p&gt;In your &lt;code class=&quot;highlighter-rouge&quot;&gt;Activity&lt;/code&gt;, inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;onCreate()&lt;/code&gt; method, pass the layout you just created to the &lt;code class=&quot;highlighter-rouge&quot;&gt;setContentView()&lt;/code&gt; method. Once you do so, you’ll be able to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;findViewById()&lt;/code&gt; method to get a reference to the &lt;code class=&quot;highlighter-rouge&quot;&gt;mylayout&lt;/code&gt; view.&lt;/p&gt;

&lt;p&gt;And then, all you need to do is call the &lt;code class=&quot;highlighter-rouge&quot;&gt;setSystemUiVisibility()&lt;/code&gt; method and pass the following flags to it:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;View.SYSTEM_UI_FLAG_HIDE_NAVIGATION&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;View.SYSTEM_UI_FLAG_FULLSCREEN&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, here’s what your code would look like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;overlay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;findViewById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mylayout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;overlay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setSystemUiVisibility&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SYSTEM_UI_FLAG_HIDE_NAVIGATION&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SYSTEM_UI_FLAG_IMMERSIVE_STICKY&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SYSTEM_UI_FLAG_FULLSCREEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And that’s it. If you run the app for the first time now, on Android Marshmallow, you’ll see a message that looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/block1/fullscreen1.png&quot; class=&quot;img-responsive center-block img-thumbnail&quot; alt=&quot;full screen message &quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you hide the message, you’ll see that your layout has occupied every single pixel of the device’s screen.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/block1/fullscreen2.png&quot; class=&quot;img-responsive center-block img-thumbnail&quot; alt=&quot;full screen android&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 12 Sep 2016 00:00:00 +0530</pubDate>
        <link>http://progur.com/2016/09/how-to-hide-statusbar-navigationbar-android.html</link>
        <guid isPermaLink="true">http://progur.com/2016/09/how-to-hide-statusbar-navigationbar-android.html</guid>
        
        
        <category>Programming</category>
        
      </item>
    
      <item>
        <title>How to Create Deep Neural Networks in JavaScript</title>
        <description>&lt;p&gt;In my &lt;a href=&quot;/2016/09/how-to-create-and-use-neural-networks-in-javascript.html&quot;&gt;previous post&lt;/a&gt;, I showed you how to create a simple neural network that has only an input layer, and an output layer. By adding a few hidden layers between the input and output layers, you can create a deep neural network. Deep neural networks are usually far more powerful, and are capable of both supervised and unsupervised learning. In this tutorial, I’ll show you how to create a deep neural network with two hidden layers, and use it to perform yet another rather trivial task: decide what I should wear based on the temperature.&lt;/p&gt;

&lt;h3 id=&quot;creating-the-deep-neural-network&quot;&gt;Creating the Deep Neural Network&lt;/h3&gt;

&lt;p&gt;So, this time, I want to build a neural network that can take the temperature in Celsius as an input, and tell me what I should be wearing. Here’s the algorithm it should follow:&lt;/p&gt;

&lt;pre class=&quot;brush: ruby&quot;&gt;
if TEMPERATURE &amp;lt;= 5°C
    Suggest THICK JACKET

if TEMPERATURE &amp;gt; 5°C and TEMPERATURE &amp;lt;= 15°C
    Suggest SWEATER

if TEMPERATURE &amp;gt; 15°C and TEMPERATURE &amp;lt;= 40°C
    Suggest T-SHIRT

if TEMPERATURE &amp;gt; 40°C
    Suggest NOTHING 
&lt;/pre&gt;

&lt;p&gt;Now, you might be thinking we can simply use one neuron in the input layer for the temperature. Well, you can, however, your neural network’s accuracy would then be rather low. In this tutorial, we’re going to convert the temperature into a 7-digit binary form, and use seven neurons for the input layer.&lt;/p&gt;

&lt;p&gt;You can use the following function to do the conversion:&lt;/p&gt;

&lt;pre class=&quot;brush: javascript&quot;&gt;
function convertToBinaryArray(temperature) {
    var tempInBinary = temperature.toString(2); // Convert to binary

    // If it is more than 7 digits long, truncate
    if(tempInBinary.length &amp;gt; 7)
        return [1,1,1,1,1,1,1];

    // If it less than 7 digits long, add zeroes
    while(tempInBinary.length &amp;lt; 7) { 
        tempInBinary = &quot;0&quot; + tempInBinary;
    }

    // Convert string to array
    return tempInBinary.split(&quot;&quot;).map(function(i) {
        return parseInt(i); }
    );
}
&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Feel free to modify the function if you think you can make it shorter or more readable!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As for the output layer, four neurons will be enough(THICK JACKET, SWEATER, T-SHIRT, NOTHING). Additionally, we shall have 2 hidden layers with three neurons each.&lt;/p&gt;

&lt;p&gt;Although you can create the layers individually, and connect them, Synaptic offers a class called &lt;code class=&quot;highlighter-rouge&quot;&gt;synaptic.Architect.Perceptron&lt;/code&gt; that lets you build complex networks in just a few seconds. Here’s how you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;synaptic.Architect.Perceptron&lt;/code&gt; to create the deep neural network:&lt;/p&gt;

&lt;pre class=&quot;brush: javascript&quot;&gt;
var myDeepNetwork = new synaptic.Architect.Perceptron(
    7, // Input layer with 7 neurons
    3, // First hidden layer with 3 neurons
    3, // Second hidden layer with 3 neurons
    4 // Output layer with 4 neurons
);
&lt;/pre&gt;

&lt;p&gt;Our neural network is now ready!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you want to, you can also call this deep neural network a &lt;strong&gt;Multi-Layer Perceptron(MLP)&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;creating-the-training-data&quot;&gt;Creating the Training Data&lt;/h3&gt;

&lt;p&gt;We can now create a loop to generate our training data.&lt;/p&gt;

&lt;pre class=&quot;brush: javascript&quot;&gt;
var trainingData = [];

for(var i = 1;i &amp;lt; 75; i++) {
    var input = convertToBinaryArray(i); // Input layer
    var output = [0,0,0,0]; // Undecided state of output layer

    if(i &amp;lt;= 5)
        output = [1,0,0,0]; // THICK JACKET
    else if(i &amp;gt; 5 &amp;amp;&amp;amp; i &amp;lt;= 15)
        output = [0,1,0,0]; // SWEATER
    else if(i &amp;gt; 15 &amp;amp;&amp;amp; i &amp;lt;= 40)
        output = [0,0,1,0]; // T-SHIRT
    else
        output = [0,0,0,1]; // NOTHING

    trainingData.push({
        input: input,
        output: output
    });
}
&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Note that in the real world, you would not have to write any code to generate the data. You would simply pick the data up from somewhere. You would, however, still have to write code to convert it into input and output arrays.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;training-the-neural-network&quot;&gt;Training the Neural Network&lt;/h3&gt;

&lt;p&gt;Synaptic has a class called &lt;code class=&quot;highlighter-rouge&quot;&gt;synaptic.Trainer&lt;/code&gt; that allows you to train your neural network using just one method called &lt;code class=&quot;highlighter-rouge&quot;&gt;train()&lt;/code&gt;. Let’s use that now.&lt;/p&gt;

&lt;pre class=&quot;brush: javascript&quot;&gt;
var myTrainer = new synaptic.Trainer(myDeepNetwork); // Create trainer
myTrainer.train(trainingData {
    rate: 0.1,
    iterations: 10000,
    shuffle: true
}); // Train with training data
&lt;/pre&gt;

&lt;p&gt;As you can see, you can pass the learning rate, number of iterations and other configurations details directly to the &lt;code class=&quot;highlighter-rouge&quot;&gt;train()&lt;/code&gt; method.&lt;/p&gt;

&lt;h3 id=&quot;using-the-neural-network&quot;&gt;Using the Neural Network&lt;/h3&gt;

&lt;p&gt;Our neural network is trained and ready to be used. Let’s call its &lt;code class=&quot;highlighter-rouge&quot;&gt;activate()&lt;/code&gt; method for the temperature 11°C, and see what it recommends.&lt;/p&gt;

&lt;pre class=&quot;brush: javascript&quot;&gt;
var cTemp = convertToBinaryArray(11);
var recommendations = myDeepNetwork.activate(cTemp);

// Log neuron outputs
console.log(&quot;THICK JACKET neuron: &quot; + (recommendations[0] * 100) + &quot;%&quot;);
console.log(&quot;SWEATER neuron: &quot; + (recommendations[1] * 100) + &quot;%&quot;);
console.log(&quot;T-SHIRT neuron: &quot; + (recommendations[2] * 100) + &quot;%&quot;);
console.log(&quot;NOTHING neuron: &quot; + (recommendations[3] * 100) + &quot;%&quot;);
&lt;/pre&gt;

&lt;p&gt;Here’s the output I got:&lt;/p&gt;

&lt;pre class=&quot;brush: bash&quot;&gt;
THICK JACKET neuron: 1.187852121842318%
SWEATER neuron: 99.04285103672623%
T-SHIRT neuron: 0.19623392618093957%
NOTHING neuron: 0.2812308783464911%
&lt;/pre&gt;

&lt;p&gt;As you can see, for 11°C, the SWEATER neuron is firing with &amp;gt;99% confidence, while all other neurons have less than 2% confidence.&lt;/p&gt;

&lt;p&gt;Let us now see what it says for 32°C.&lt;/p&gt;

&lt;pre class=&quot;brush: bash&quot;&gt;
THICK JACKET neuron: 0.5111861782203928%
SWEATER neuron: 0.00020342986269563567%
T-SHIRT neuron: 87.58129843432297%
NOTHING neuron: 0.17906434966864235%
&lt;/pre&gt;

&lt;p&gt;The neural network has the right answer again. This time, the T-SHIRT neuron is firing with the highest confidence.&lt;/p&gt;

&lt;p&gt;What about a border condition, like 5°C.&lt;/p&gt;

&lt;pre class=&quot;brush: bash&quot;&gt;
THICK JACKET neuron: 71.57886740905687%
SWEATER neuron: 19.97632896204967%
T-SHIRT neuron: 0.5732055868587239%
NOTHING neuron: 0.044105602954815616%
&lt;/pre&gt;

&lt;p&gt;The neural network now shows 71% confidence for THICK JACKET and ~20% confidence for SWEATER. Nevertheless, because THICK JACKET has the highest value, it is still correct.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;You now know how to construct and use deep neural networks. Feel free to experiment with different values for the learning rates, number of hidden layers, and other such configurations details of the neural network.&lt;/p&gt;
</description>
        <pubDate>Wed, 07 Sep 2016 00:00:00 +0530</pubDate>
        <link>http://progur.com/2016/09/how-to-create-deep-neural-networks-in-javascript.html</link>
        <guid isPermaLink="true">http://progur.com/2016/09/how-to-create-deep-neural-networks-in-javascript.html</guid>
        
        
        <category>Programming</category>
        
      </item>
    
      <item>
        <title>How to Create Simple Neural Networks in JavaScript</title>
        <description>&lt;p&gt;Let’s face it, if you are an ordinary web or mobile application developer, learning how to use machine learning libraries such as TensorFlow or Caffe isn’t easy. Their APIs are probably intuitive for people who are already quite familiar with neural networks, matrix operations, and advanced mathematics. For the layman, however, they simply don’t make much sense. Fortunately, last week, I found a JavaScript library called Synaptic. I must say, I had a lot of fun using it. In this tutorial, I’m going to show you how to use it create simple neural networks.&lt;/p&gt;

&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

&lt;p&gt;You really don’t need to install anything. Synaptic is available on CDNJS, which means, you must simply add the following code to your HTML page:&lt;/p&gt;

&lt;pre class=&quot;brush: javascript&quot;&gt;
&amp;lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/synaptic/1.0.8/synaptic.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Additionally, let’s add Underscore.js, because we will be needing some its very handy array-related methods.&lt;/p&gt;

&lt;pre class=&quot;brush: javascript&quot;&gt;
&amp;lt;script type=&quot;text/javascript&quot; src=&quot;https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;

&lt;h3 id=&quot;creating-a-simple-neural-network&quot;&gt;Creating a Simple Neural Network&lt;/h3&gt;

&lt;p&gt;Before you create a neural network, you must decide what you want it to do. Now, I won’t be showing you how to perform complex tasks such image classification or sentiment analysis. Instead, let’s do something trivially easy.&lt;/p&gt;

&lt;p&gt;Imagine you are creating a simple neural network that’s going to be put inside your really dumb hamster. The neural network should make him do the following things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If you clap, he must sit down.&lt;/li&gt;
  &lt;li&gt;If you whistle, he must run.&lt;/li&gt;
  &lt;li&gt;If you clap AND whistle, he must jump.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To model this behavior, we’re going to need two input neurons (CLAP, WHISTLE), and three output neurons(SIT, RUN, JUMP). That means, we’re going to have two layers of neurons.&lt;/p&gt;

&lt;p&gt;Let us create the two layers using the &lt;code class=&quot;highlighter-rouge&quot;&gt;synaptic.Layer&lt;/code&gt; class.&lt;/p&gt;

&lt;pre class=&quot;brush: javascript&quot;&gt;
var input = new synaptic.Layer(2); // Two inputs
var output = new synaptic.Layer(3); // Three outputs
&lt;/pre&gt;

&lt;p&gt;Right now, there are no connections between the two layers. To connect them, you must use the &lt;code class=&quot;highlighter-rouge&quot;&gt;project()&lt;/code&gt; method.&lt;/p&gt;

&lt;pre class=&quot;brush: javascript&quot;&gt;
input.project(output); // Connect input to output
&lt;/pre&gt;

&lt;p&gt;At this point, both the layers are fully connected. In other words, every neuron of the input layer is connected to every neuron of the output layer.&lt;/p&gt;

&lt;h3 id=&quot;training-the-neural-network&quot;&gt;Training the Neural Network&lt;/h3&gt;

&lt;p&gt;Our neural network is ready to be trained. So, let’s start creating our training data. It’s going to be two arrays, one for the input, and one for the output. As you might have guessed, input will have two values, and output will have three values. The values must always range from 0 to 1. In this tutorial, we shall stick with exactly 0 and 1.&lt;/p&gt;

&lt;p&gt;The first element of the input array will be 1 if you are clapping, and 0 otherwise. Similarly, the second element will be 1 if you are whistling, and 0 otherwise.&lt;/p&gt;

&lt;p&gt;And, the first element of the output will be 1 if the hamster must sit, and 0 otherwise. The second element will be 1 if the hamster must run, and 0 otherwise. Lastly, the third element will be 1 if the hamster must jump, and 0 otherwise.&lt;/p&gt;

&lt;p&gt;Accordingly, here’s what the training data will look like:&lt;/p&gt;

&lt;pre class=&quot;brush: javascript&quot;&gt;
var trainingData = [
    {input: [1, 0], output: [1, 0, 0]}, // Clap -&amp;gt; Sit
    {input: [0, 1], output: [0, 1, 0]}, // Whistle -&amp;gt; Run
    {input: [1, 1], output: [0, 0, 1]}, // Clap+Whistle -&amp;gt; Jump
];
&lt;/pre&gt;

&lt;p&gt;It looks simple, but spend some time to fully understand the training data’s arrays. Almost every machine learning framework needs training data, and understanding how to create and format that data is extremely important.&lt;/p&gt;

&lt;p&gt;Before we proceed any further, we should decide how impressionable our neural network should be. In other words, we must give it a &lt;strong&gt;learning rate&lt;/strong&gt;. A very low learning rate will make the neural network a slow, but very good learner. On the other hand, a very high learning rate will make it learn quickly, but also very erratically. For now, let’s say the learning rate is 0.4.&lt;/p&gt;

&lt;p&gt;We can now send the &lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt; data to the input layer of our network using the &lt;code class=&quot;highlighter-rouge&quot;&gt;activate()&lt;/code&gt; method. And then, we should call the &lt;code class=&quot;highlighter-rouge&quot;&gt;propagate()&lt;/code&gt; method on the output layer to help the neural network adjust its configuration. The &lt;code class=&quot;highlighter-rouge&quot;&gt;propagate()&lt;/code&gt; method needs the &lt;code class=&quot;highlighter-rouge&quot;&gt;output&lt;/code&gt; data as its input.&lt;/p&gt;

&lt;pre class=&quot;brush: javascript&quot;&gt;
var learningRate = 0.4;

function train() {
    for(var i = 0; i &amp;lt; trainingData.length; i++) {
        input.activate(trainingData[i][&quot;input&quot;]);
        output.activate();
        output.propagate(learningRate, trainingData[i][&quot;output&quot;]);
    }
}
&lt;/pre&gt;

&lt;p&gt;Just like humans, neural networks don’t learn to do things the right way after training just once. Well, they kinda do, but their confidence will be low. To improve their confidence levels, they need to be trained repeatedly. Therefore, let’s train our neural network about 1000 times, and also shuffle the order of the &lt;code class=&quot;highlighter-rouge&quot;&gt;trainingData&lt;/code&gt; each time.&lt;/p&gt;

&lt;pre class=&quot;brush: javascript&quot;&gt;
function retrain() {
    for(var i = 0; i &amp;lt; 1000; i++) {
        trainingData = _.shuffle(trainingData);
        train();
    }
}

retrain(); // Start the training
&lt;/pre&gt;

&lt;h3 id=&quot;using-the-neural-network&quot;&gt;Using the Neural Network&lt;/h3&gt;

&lt;p&gt;The neural network is now trained and ready to be used. To use it, you must pass an array to the input layer, and then check the neurons of the output layer. The &lt;code class=&quot;highlighter-rouge&quot;&gt;activate()&lt;/code&gt; method can be used for doing both.&lt;/p&gt;

&lt;p&gt;Let’s say you just whistle. Here’s what you would do:&lt;/p&gt;

&lt;pre class=&quot;brush: javascript&quot;&gt;
input.activate([0,1]); // Whistle
var result = output.activate();
&lt;/pre&gt;

&lt;p&gt;The result will now contain three numbers, all ranging from 0 to 1. Here’s how you can print all of them out as percentages:&lt;/p&gt;

&lt;pre class=&quot;brush: javascript&quot;&gt;
console.log(&quot;Sit Neuron: &quot; + result[0] * 100 + &quot;%&quot;);
console.log(&quot;Run Neuron: &quot; + result[1] * 100 + &quot;%&quot;);
console.log(&quot;Jump Neuron: &quot; + result[2] * 100 + &quot;%&quot;);
&lt;/pre&gt;

&lt;p&gt;I got these values on the console:&lt;/p&gt;

&lt;pre class=&quot;brush: bash&quot;&gt;
Sit Neuron: 0.014995911436294706%
Run Neuron: 99.39201708556335%
Jump Neuron: 1.2615268528823826%
&lt;/pre&gt;

&lt;p&gt;As you can see, the &lt;strong&gt;Run&lt;/strong&gt; neuron’s value is really high, which means, the neural network has learned everything correctly. Pass a different input array, say &lt;code class=&quot;highlighter-rouge&quot;&gt;[1,1]&lt;/code&gt;, and you should see the &lt;strong&gt;Jump&lt;/strong&gt; neuron’s value very high.&lt;/p&gt;

&lt;pre class=&quot;brush: bash&quot;&gt;
Sit Neuron: 0.04761738707168859%
Run Neuron: 0.4768082300857423%
Jump Neuron: 98.24123037285819%
&lt;/pre&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;You now know how to create, train, and use a simple neural network using JavaScript and Synaptic. We created something very simple, and trivial, but if you are a beginner, I’m sure you learned to do something new. In my next post, I’ll be showing you how to create more complex neural networks, which contain more layers.&lt;/p&gt;
</description>
        <pubDate>Mon, 05 Sep 2016 00:00:00 +0530</pubDate>
        <link>http://progur.com/2016/09/how-to-create-and-use-neural-networks-in-javascript.html</link>
        <guid isPermaLink="true">http://progur.com/2016/09/how-to-create-and-use-neural-networks-in-javascript.html</guid>
        
        
        <category>Programming</category>
        
      </item>
    
      <item>
        <title>How to Install and Use Facebook's Zstandard</title>
        <description>&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Recently, Facebook released version 1.0 of &lt;a href=&quot;https://github.com/facebook/zstd&quot;&gt;Zstandard&lt;/a&gt;, popularly known as just Zstd. It is an implementation of a new data compression algorithm developed by &lt;a href=&quot;https://github.com/Cyan4973&quot;&gt;Yann Collet&lt;/a&gt;, the same guy who developed LZ4 and xxHash. I believe that Zstandard might very well become the new de facto compression library of the future because it overcomes most of the limitations present in zlib, and offers markedly better compression ratios.&lt;/p&gt;

&lt;p&gt;In this tutorial, I’ll be showing you how to install Zstd and use it both as a command line tool, and as a C library.&lt;/p&gt;

&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

&lt;p&gt;The source code of Zstandard is available on &lt;a href=&quot;https://github.com/facebook/zstd/releases/tag/v1.0.0&quot;&gt;GitHub&lt;/a&gt;. So, all you need to do is download it as a ZIP file. Once you have downloaded the file and extracted it, you must compile it. Doing so is easy if you are using Ubuntu. Just get inside the &lt;strong&gt;zstd-1.0.0&lt;/strong&gt; directory, and run &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt;.&lt;/p&gt;

&lt;pre class=&quot;brush: bash&quot;&gt;
cd zstd-1.0.0
make install
&lt;/pre&gt;

&lt;p&gt;Note that if you want to install &lt;code class=&quot;highlighter-rouge&quot;&gt;zstd&lt;/code&gt; in a directory of your choice, you can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;PREFIX&lt;/code&gt; option. For example, if you want to install &lt;code class=&quot;highlighter-rouge&quot;&gt;zstd&lt;/code&gt; inside &lt;strong&gt;/tmp/zstd&lt;/strong&gt;, you would type in the following:&lt;/p&gt;

&lt;pre class=&quot;brush: bash&quot;&gt;
cd zstd-1.0.0
make install PREFIX=/tmp/zstd
&lt;/pre&gt;

&lt;p&gt;Of course, you would then have to add the zstd directory to your &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt; variable manually.&lt;/p&gt;

&lt;p&gt;If everything went well during the compilation, you’ll now have a binary file called &lt;strong&gt;zstd&lt;/strong&gt;. To check if it is working, type in the following command:&lt;/p&gt;

&lt;pre class=&quot;brush: bash&quot;&gt;
zstd --version
&lt;/pre&gt;

&lt;p&gt;You should see output that looks similar to this:&lt;/p&gt;

&lt;pre class=&quot;brush: bash&quot;&gt;
*** zstd command line interface 32-bits v1.0.0, by Yann Collet ***
&lt;/pre&gt;

&lt;h3 id=&quot;using-zstandard-as-a-compression-tool&quot;&gt;Using Zstandard as a Compression Tool&lt;/h3&gt;

&lt;p&gt;Using Zstandard is easy. You simply pass a file name to it, and it compresses it, generating a new file with a &lt;code class=&quot;highlighter-rouge&quot;&gt;.zst&lt;/code&gt; extension.&lt;/p&gt;

&lt;p&gt;For example, here’s how you would compress a file called &lt;strong&gt;myfile.txt&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&quot;brush: bash&quot;&gt;
zstd myfile.txt
&lt;/pre&gt;

&lt;p&gt;To decompress a file, you can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;-d&lt;/code&gt; option. Here’s how:&lt;/p&gt;

&lt;pre class=&quot;brush: bash&quot;&gt;
zstd -d myfile.txt.zst
&lt;/pre&gt;

&lt;p&gt;Alternatively, you could use the &lt;code class=&quot;highlighter-rouge&quot;&gt;unzstd&lt;/code&gt; command.&lt;/p&gt;

&lt;pre class=&quot;brush: bash&quot;&gt;
unzstd myfile.txt.zst
&lt;/pre&gt;

&lt;p&gt;Usually, you would want to compress more than just one file. However, you can’t pass a directory to &lt;code class=&quot;highlighter-rouge&quot;&gt;zstd&lt;/code&gt; directly. To overcome this limitation, you can simply use the &lt;code class=&quot;highlighter-rouge&quot;&gt;tar&lt;/code&gt; command along with &lt;code class=&quot;highlighter-rouge&quot;&gt;zstd&lt;/code&gt;.&lt;/p&gt;

&lt;pre class=&quot;brush: bash&quot;&gt;
tar -cvf mydirectory.tar /mydirectory
zstd mydirectory.tar
&lt;/pre&gt;

&lt;p&gt;Zstandard offeres 19 different levels of compression. The default level is 3. Here’s how you use a higher compression level:&lt;/p&gt;

&lt;pre class=&quot;brush: bash&quot;&gt;
zstd -15 myfile.txt
&lt;/pre&gt;

&lt;p&gt;Of course, a higher compression level also means the time taken to compress is longer.&lt;/p&gt;

&lt;h3 id=&quot;using-zstandard-as-a-library&quot;&gt;Using Zstandard as a Library&lt;/h3&gt;

&lt;p&gt;Let me now show you how to use Zstandard in a C program. I’ll be using Ubuntu as my operating system. Therefore, we’ll be working with &lt;code class=&quot;highlighter-rouge&quot;&gt;gcc&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To be able to use Zstandard in your program, you must include the &lt;code class=&quot;highlighter-rouge&quot;&gt;zstd.h&lt;/code&gt; header file. To follow this tutorial, you will also need &lt;code class=&quot;highlighter-rouge&quot;&gt;stdio.h&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;stdlib.h&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;string.h&lt;/code&gt;.&lt;/p&gt;

&lt;pre class=&quot;brush: cpp&quot;&gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

#include &amp;lt;zstd.h&amp;gt;

int main() {

}
&lt;/pre&gt;

&lt;p&gt;In this tutorial, I’ll be showing you how to compress a string. You can, however, use this knowledge to compress other forms of data too.&lt;/p&gt;

&lt;pre class=&quot;brush: cpp&quot;&gt;
char* my_data = &quot;aaaaaaabbbbbbbbbccccccccddddddddeeeeeeeefffffffffggggggggg&quot;;
size_t size_of_data = strlen(my_data);
&lt;/pre&gt;

&lt;p&gt;We must now create a buffer for the compressed data, and also decide how big it should be. &lt;code class=&quot;highlighter-rouge&quot;&gt;zstd.h&lt;/code&gt; has a helper function called &lt;code class=&quot;highlighter-rouge&quot;&gt;ZSTD_compressBound()&lt;/code&gt; that lets you know what the buffer size would have to be in the worst case.&lt;/p&gt;

&lt;pre class=&quot;brush: cpp&quot;&gt;
size_t estimated_size_of_compressed_data = ZSTD_compressBound(size_of_data);
void* compressed_data = malloc(estimated_size_of_compressed_data);
&lt;/pre&gt;

&lt;p&gt;To compress your data, you must call the &lt;code class=&quot;highlighter-rouge&quot;&gt;ZSTD_compress()&lt;/code&gt; function. It returns the actual size of the compressed data.&lt;/p&gt;

&lt;pre class=&quot;brush: cpp&quot;&gt;
size_t actual_size_of_compressed_data = 
        ZSTD_compress(compressed_data, estimated_size_of_compressed_data, 
            my_data, size_of_data, 19);
&lt;/pre&gt;

&lt;p&gt;Note that the last argument to the function is the compression level, which can range from 1(lowest) to 22(highest).&lt;/p&gt;

&lt;p&gt;At this point, the &lt;code class=&quot;highlighter-rouge&quot;&gt;compressed_data&lt;/code&gt; buffer stores the data in a compressed format. You can easily write it to a file using &lt;code class=&quot;highlighter-rouge&quot;&gt;fwrite()&lt;/code&gt;. The output file must, of course, be opened in binary mode.&lt;/p&gt;

&lt;pre class=&quot;brush: cpp&quot;&gt;
FILE *fp = fopen(&quot;/tmp/mydata.zst&quot;, &quot;wb&quot;);
fwrite(compressed_data, actual_size_of_compressed_data, 1, fp);
fclose(fp);
&lt;/pre&gt;

&lt;p&gt;The program is ready. To compile it, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;gcc&lt;/code&gt; as follows:&lt;/p&gt;

&lt;pre class=&quot;brush: bash&quot;&gt;
gcc myprogram.c -lzstd
&lt;/pre&gt;

&lt;p&gt;You can check if the compressed data can be decompressed by passing &lt;strong&gt;mydata.zst&lt;/strong&gt;, which is the output of our program, to &lt;code class=&quot;highlighter-rouge&quot;&gt;zstdcat&lt;/code&gt;.&lt;/p&gt;

&lt;pre class=&quot;brush: bash&quot;&gt;
zstdcat /tmp/mydata.zst
&lt;/pre&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;You now know how to use Zstandard. Although we focused on using it using the C language only, Zstandard has bindings for several languages.&lt;/p&gt;
</description>
        <pubDate>Fri, 02 Sep 2016 00:00:00 +0530</pubDate>
        <link>http://progur.com/2016/09/how-to-install-and-use-zstd-facebook.html</link>
        <guid isPermaLink="true">http://progur.com/2016/09/how-to-install-and-use-zstd-facebook.html</guid>
        
        
        <category>Programming</category>
        
      </item>
    
      <item>
        <title>How to Create a Material Design Jekyll Theme</title>
        <description>&lt;p&gt;In my opinion, Jekyll has the potential to become as popular as WordPress. The only thing holding it back is the fact that there aren’t enough themes for it. Indeed, you can count the good ones on your finger tips. Thankfully, creating themes for Jekyll is extremely easy. If you are comfortable with HTML, and are familiar with a good CSS framework, it won’t take you very long either. In this tutorial, I’m going to show you how to create a responsive, material design Jekyll theme from scratch. We’ll be using &lt;a href=&quot;http://materializecss.com/&quot;&gt;Materialize&lt;/a&gt; as the CSS framework. This will be a theme you can immediately start using for a blog. And, with a little more polish and customizations, you can even aspire to sell it!&lt;/p&gt;

&lt;h3 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h3&gt;

&lt;p&gt;In order to follow this tutorial, you must obviously have Jekyll installed and configured on your computer. You must also have a basic understanding of HTML and CSS.&lt;/p&gt;

&lt;h3 id=&quot;create-a-new-jekyll-theme&quot;&gt;Create a New Jekyll Theme&lt;/h3&gt;

&lt;p&gt;To create a new Jekyll theme, you must use the &lt;code class=&quot;highlighter-rouge&quot;&gt;new-theme&lt;/code&gt; command of Jekyll’s CLI.&lt;/p&gt;

&lt;pre class=&quot;brush: ruby&quot;&gt;
jekyll new-theme my-material-theme
&lt;/pre&gt;

&lt;p&gt;You will now have a new directory called &lt;strong&gt;my-material-theme&lt;/strong&gt;. All your theme’s files will be inside this directory. Enter it using &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;create-includes&quot;&gt;Create Includes&lt;/h3&gt;

&lt;p&gt;Ideally, your theme must have includes for a header and a footer. They are not always necessary, but, by having them, you can make your theme more flexible. Let’s create the header first by creating a new file called &lt;strong&gt;header.html&lt;/strong&gt; inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;_includes&lt;/code&gt; directory. Open it using any code editor. I prefer Brackets.&lt;/p&gt;

&lt;p&gt;The header must contain the doctype, &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tags. Inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag, you must add all your CSS requirements, and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tags. Accordingly, add the following code to the file:&lt;/p&gt;

&lt;pre class=&quot;brush: html&quot;&gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
      &amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&amp;gt;
      &amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&amp;gt;
      &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/materialize/0.97.7/css/materialize.min.css&quot;&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
&lt;/pre&gt;

&lt;p&gt;As you can see, I’m using a CDN to load the CSS of the Materialize framework. Note that I’ve opened &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag and not closed it. You’ll see why next.&lt;/p&gt;

&lt;p&gt;Create a new file called &lt;strong&gt;footer.html&lt;/strong&gt; inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;_includes&lt;/code&gt; directory. The footer must contain all your &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags, and the closing tags for both &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;

&lt;pre class=&quot;brush: html&quot;&gt;
&amp;lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/materialize/0.97.7/js/materialize.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;p&gt;I’ve, of course, used a CDN again to load the JS file of the Materialize framework.&lt;/p&gt;

&lt;h3 id=&quot;create-a-default-layout&quot;&gt;Create a Default Layout&lt;/h3&gt;

&lt;p&gt;Now that we’ve created a header and footer, we must create the layout that goes between them. You are free to use any layout you want.&lt;/p&gt;

&lt;p&gt;Go to the &lt;code class=&quot;highlighter-rouge&quot;&gt;_layouts&lt;/code&gt; folder and open &lt;strong&gt;default.html&lt;/strong&gt;. This file should already contain a &lt;code class=&quot;highlighter-rouge&quot;&gt;content&lt;/code&gt; template. All you need to do is surround that with your layout. Here’s my layout, with a navbar, a simple container, and a footer:&lt;/p&gt;

&lt;pre class=&quot;brush: html&quot;&gt;
{% include header.html %}

&amp;lt;nav&amp;gt;
    &amp;lt;div class=&quot;nav-wrapper&quot;&amp;gt;
      &amp;lt;div class=&quot;container&quot;&amp;gt;
          &amp;lt;a href=&quot;#&quot; class=&quot;brand-logo&quot;&amp;gt; {{ site.title }} &amp;lt;/a&amp;gt;      
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/nav&amp;gt;

&amp;lt;div class=&quot;container&quot;&amp;gt;
     {{ content }} 
&amp;lt;/div&amp;gt;

&amp;lt;footer class=&quot;page-footer&quot;&amp;gt;
  &amp;lt;div class=&quot;container&quot;&amp;gt;
    &amp;lt;div class=&quot;row&quot;&amp;gt;
      &amp;lt;div class=&quot;col l6 s12&quot;&amp;gt;
        &amp;lt;h5 class=&quot;white-text&quot;&amp;gt; {{ site.title }} &amp;lt;/h5&amp;gt;
        &amp;lt;p class=&quot;grey-text text-lighten-4&quot;&amp;gt; {{ site.description }} &amp;lt;/p&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class=&quot;col l4 offset-l2 s12&quot;&amp;gt;
        &amp;lt;h5 class=&quot;white-text&quot;&amp;gt;Links&amp;lt;/h5&amp;gt;
        &amp;lt;ul&amp;gt;
          &amp;lt;li&amp;gt;&amp;lt;a class=&quot;grey-text text-lighten-3&quot; href=&quot;#!&quot;&amp;gt;Link 1&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
          &amp;lt;li&amp;gt;&amp;lt;a class=&quot;grey-text text-lighten-3&quot; href=&quot;#!&quot;&amp;gt;Link 2&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
        &amp;lt;/ul&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&quot;footer-copyright&quot;&amp;gt;
    &amp;lt;div class=&quot;container&quot;&amp;gt;
    © 2014 Copyright {{ site.name }} | All rights reserved.
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/footer&amp;gt;

{% include footer.html %}
&lt;/pre&gt;

&lt;h3 id=&quot;create-the-home-page&quot;&gt;Create the Home Page&lt;/h3&gt;

&lt;p&gt;Well, every website has a home page, usually called &lt;strong&gt;index.html&lt;/strong&gt;. Therefore, create the file at the root of your theme, and open it. Inside it, add YAML front-matter saying it uses the &lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt; layout.&lt;/p&gt;

&lt;p&gt;The home page usually lists all the posts present the blog. Therefore, we must now create a &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loop that loops through the &lt;code class=&quot;highlighter-rouge&quot;&gt;site.posts&lt;/code&gt; array. Inside the loop, you must specify how each post must be rendered. The following code creates a material card for each post:&lt;/p&gt;

&lt;pre class=&quot;brush: html&quot;&gt;
---
layout: default
---
{% for post in site.posts %}
&amp;lt;div class=&quot;row&quot;&amp;gt;
    &amp;lt;div class=&quot;col s12 m6&quot;&amp;gt;
      &amp;lt;div class=&quot;card&quot;&amp;gt;
        &amp;lt;div class=&quot;card-content&quot;&amp;gt;
          &amp;lt;span class=&quot;card-title&quot;&amp;gt;{{ post.title }}&amp;lt;/span&amp;gt;
          &amp;lt;p&amp;gt;{{ post.excerpt }}&amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class=&quot;card-action&quot;&amp;gt;
          &amp;lt;a href=&quot;{{ post.url | prepend: site.baseurl }}&quot;&amp;gt;
            Read More
          &amp;lt;/a&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
{% endfor %}
&lt;/pre&gt;

&lt;p&gt;The theme is now ready!&lt;/p&gt;

&lt;p&gt;Here’s a sample blog using the theme:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/block1/material_theme.png&quot; class=&quot;img-responsive center-block img-thumbnail&quot; alt=&quot;material design jekyll theme&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;generate-a-gem&quot;&gt;Generate a Gem&lt;/h3&gt;

&lt;p&gt;Optionally, if you want to publish your theme, you can convert it into a gem so that others can use it more easily. You can do so by running the following command:&lt;/p&gt;

&lt;pre class=&quot;brush: bash&quot;&gt;
gem build my-material-theme.gemspec
&lt;/pre&gt;

&lt;p&gt;Note, however, that &lt;strong&gt;index.html&lt;/strong&gt; won’t be a part of the theme gem. To solve this problem, you can move all the contents of &lt;strong&gt;index.html&lt;/strong&gt; to a new type of layout inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;_layout&lt;/code&gt; directory.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;You now know how to create a theme for Jekyll from scratch. As you saw, it’s very easy and takes very little time(unless you have a complicated design).&lt;/p&gt;
</description>
        <pubDate>Tue, 30 Aug 2016 00:00:00 +0530</pubDate>
        <link>http://progur.com/2016/08/create-jekyll-theme-material-design.html</link>
        <guid isPermaLink="true">http://progur.com/2016/08/create-jekyll-theme-material-design.html</guid>
        
        
        <category>Programming</category>
        
      </item>
    
      <item>
        <title>Jekyll vs WordPress, And Why I Chose Jekyll!</title>
        <description>&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;I assure you, when you decide to have a blog of your own, you’re going to spend days, if not weeks, choosing the “perfect” blogging platform. Usually, most people end up choosing WordPress, mostly because they’ve heard of it, or know someone who’s using it. Of course, those who’ve been on the Internet for long enough, would also choose it because it’s open-source and has a lively community. And then there are PHP programmers, who choose it because they think they’ll be able to make all the customizations they want.&lt;/p&gt;

&lt;h3 id=&quot;advantages-of-using-jekyll&quot;&gt;Advantages of Using Jekyll&lt;/h3&gt;

&lt;p&gt;I, however, chose to use Jekyll. It was a hard decision, and, I’m not even sure if it was right. But I’ll stick to it for one reason, and one reason alone: Jekyll is a static site generator. That means, I can host Jekyll blogs on any web server that can serve static pages. I don’t need any databases, interpreters or security updates. I don’t even have to worry about performance. Why? Because my blog now consists of only HTML pages, CSS, JavaScript, and images.&lt;/p&gt;

&lt;p&gt;What’s more, Jekyll offers unlimited flexibility. I have complete control over the looks of every single page in my blog. Now, you could argue that that’s possible with WordPress too. But, with Jekyll, it’s far, far easier, and far less time-consuming.&lt;/p&gt;

&lt;p&gt;Some of you programmers might be asking how comments would work on a static blog. Ever heard of Disqus? Well, I’m sure you have, becaue most blogs use it today. Embedding Disqus comments in a Jekyll blog is a walk in the park.&lt;/p&gt;

&lt;p&gt;One last advantage I’d like to mention is that setting up Jekyll on your computer takes less than five minutes. If you don’t have Ruby installed already, you can install it using any package manager. For example, if your are using Ubuntu, you could simply type in the following first:&lt;/p&gt;

&lt;pre class=&quot;brush: bash&quot;&gt;
sudo apt-get install ruby2.0 ruby2.0-dev ruby2.0-bundler
&lt;/pre&gt;

&lt;p&gt;Once Ruby is installed, installing Jekyll takes just one command.&lt;/p&gt;

&lt;pre class=&quot;brush: bash&quot;&gt;
gem2.0 install jekyll
&lt;/pre&gt;

&lt;h3 id=&quot;hosting-jekyll-blogs&quot;&gt;Hosting Jekyll Blogs&lt;/h3&gt;

&lt;p&gt;When it comes to hosting a Jekyll blog, you’ve a lot of options. I mean, every web server can host static HTML pages. You can use paid services such as Amazon S3, Heroku, Digital Ocean, and the list goes on and on. But, you could also choose services such as GitHub, Gitlab, Firebase or App Engine, and run your blog for free. In fact, GitHub has built-in support for Jekyll blogs, and you can start using it right now by creating a new GitHub account and repository. The same can be said about GitLab.&lt;/p&gt;

&lt;p&gt;You might now be wondering, &lt;em&gt;“if Jekyll is really so good, why don’t I see anybody using it?”&lt;/em&gt; You’d be surprised how many blogs are using it these days. I suggest you spend a few minutes taking a look at this &lt;a href=&quot;https://talk.jekyllrb.com/t/showcase-sites-made-using-jekyll/18&quot;&gt;showcase&lt;/a&gt;, or this &lt;a href=&quot;https://github.com/jekyll/jekyll/wiki/sites&quot;&gt;wiki&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;shortcomings&quot;&gt;Shortcomings&lt;/h3&gt;

&lt;p&gt;I think I’ve praised Jekyll enough. Let’s talk about some of its inadequacies now. First of all, you’ll have to use the command line while working with it. You need to know just a handful of commands though. For example, to create a new Jekyll blog, you would have to say something like this:&lt;/p&gt;

&lt;pre class=&quot;brush: bash&quot;&gt;
jekyll new BearsAreFluffy
&lt;/pre&gt;

&lt;p&gt;And to make it ready for publishing, you would have to type in the following:&lt;/p&gt;

&lt;pre class=&quot;brush: bash&quot;&gt;
jekyll build
&lt;/pre&gt;

&lt;p&gt;If that scares you, you should consider using &lt;a href=&quot;https://jekyllrb.com/news/2016/08/24/jekyll-admin-initial-release/&quot;&gt;Jekyll Admin&lt;/a&gt;, which offers a nice GUI alternative for Jekyll’s command line tools. However, it was released just a few days ago. So, don’t expect too much from it.&lt;/p&gt;

&lt;p&gt;In my opinion, the only thing that is holding Jekyll back is a severe lack of good themes. While hundreds of new WordPress themes are published every week, there might be less than a dozen good Jekyll themes in the wild right now, if that. Recently, Jekyll changed its theming system. So, I’m hoping more theme developers start supporting Jekyll.&lt;/p&gt;

&lt;p&gt;Here’s what the default Jekyll theme looks like (it’s called Minima):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/block1/jekyll_default_theme.png&quot; class=&quot;img-responsive center-block img-thumbnail&quot; alt=&quot;Default Jekyll theme (Minima)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Jekyll plugins too are quite scarce, although there are some great ones, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-seo-tag&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-paginate&lt;/code&gt;. Adding and using a Jekyll plugin can also be quite an involved process.&lt;/p&gt;

&lt;p&gt;Lastly, Jekyll uses Ruby. That means, PHP programmers will have to learn a few things before they can start adding custom functionality to Jekyll blogs.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Jekyll definitely has a lot of potential, and is becoming increasing popular, mainly among bloggers who are also developers. Once there are enough themes, it should see more widespread usage. Until then, if you don’t like to get your hands dirty using Liquid templates and markdown, I’d say stick with WordPress. But if you want complete control over your blog, go ahead with Jekyll.&lt;/p&gt;

&lt;p&gt;Oh, and Jekyll has importers for almost every popular blogging platform. So, if you want to switch to Jekyll, it takes less than ten minutes.&lt;/p&gt;
</description>
        <pubDate>Mon, 29 Aug 2016 00:00:00 +0530</pubDate>
        <link>http://progur.com/2016/08/jekyll-vs-wordpress.html</link>
        <guid isPermaLink="true">http://progur.com/2016/08/jekyll-vs-wordpress.html</guid>
        
        
        <category>Opinion</category>
        
      </item>
    
  </channel>
</rss>
